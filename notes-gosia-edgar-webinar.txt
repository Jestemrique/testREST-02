



Notes for Gosia and Edgar:

Hi Gosia, Edgar,

Below some notes about the chat we had yesterday about the code.
Link to the GH repo:
https://github.com/Jestemrique/testREST-02

The only parts involved in the demo are the html and js files.
There are 2 html files and 2 JS files:
1.- index.html
It contains the login form and make calls to js to authenticate the user and populate the localStorage object with the projects and dossiers.
Once the user has been autheticated, library.html is loaded.

2.- Library.html
It contains all the js generated html code to render the project tabs and dossiers elements.

3.- MSTRestJS.js
This is a class with different objects and methods in charge of making the calls to our REST API using the js fetch API. This class also maintains the information needed in local storage so the projects, dossiers, etc can be retrieved when moving from one page to another and it eliminates the need to make additional calls to the REST API. The methods of this class are just wrapper for the different REST API endpoints slightly modified to meet the needs for the webinar. The results obtained are not exactly the same as the ones returned by the REST endpoints.

4.- DemoRest.js:
This file makes calls to the methods of MSTRest class to retrieve and present the information about projects and dossiers.

5.- bulma-scripts.js:
piece of code to swith between projects tabs.

The js files are located in "/assets/js" folder.

The only folder you need is the "_site" folder. You just need to download this folder, set the proper settings in the "mstrInitProps" literal in demoRest.js file to make it work. As you can see below, it's self explanatory, you just have to set the host and paths where the REST API is located.
const mstrInitProps = {
  host: 'localhost',
  port: 8080,
  loginMode: 1,
  restApiUrl: 'http://localhost:8080/Library111U2/api',
  libraryAppUrl: 'http://localhost:8080/Library111U2/app',
  persistLocalStorage: true
};

Don't worry about the styling. The css file you can see in assets folder is generated via Sass so no manual changes should be done there.


As we saw yesterday, the workflow is simple:
- demoRest.js:
This switch will determine the actions to take when changing the page. The title page is used to determine the function to trigger.
//Actions to perform in each page.
switch (pageTitle) {
  case 'Home':
    homePageActions();
    break;
  case 'Library':
    LibraryPageActions();
    break;
  default:

  break;
}


Things could be done to have it prepared
- Create several different projects and different dossiers in the vm used in the example and share them to Library. It would be also hepful to have some different users, not only administrator, to play with them. details of the vm used below:
VM: 10.23.5.242
username/password: admin/m$tr!23

- Get familiar with the code. A lot of refactoring needs to be done but the core functionality is pretty simple. Most of the lines are for generating the html to render the page. Although the _site folder is not the place to make modifications since it's automatically generated by Jekyll, in case you want to do changes there, feel free to do so. We just need to copy those files to the original assets folder in dev environment.

- Do any suggestions, ideas or comment whatever is wrong or could be improved.

- We'll discuss on ideas on how to run the webinar, things to include, etc. I think doing a dry run within the team would be super interesting to note down the timing, possible things I could've missed, etc..

Final notes:

Remember, the purpose of this is not coding in JS, as we discussed yesterday, this is only to show one of many ways to have Library dossiers classified. There are easier ways to accomplish this, but this is to intended to show the REST API and to learn. No pruduction code, etc...

In case you want to play with the whole dev files you can download the whole repo and setup the whole thing with Jekyll and Sass but, again, I used them just to make it easier to develop. They're not needed at all.
In case you want to play:
Links to Jekyll documentation:
https://jekyllrb.com/
Links to Sass documentation:
https://sass-lang.com/
